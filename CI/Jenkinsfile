pipeline {
    agent { 
        docker {
            image 'maven:2'
            args '-v /var/run/docker.sock:/var/run/docker.sock --user=root'
        }
    }            
    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                sh '''
                git clone --branch teste-dockerindocker https://github.com/frovai/poc-teste.git
                '''
            }
        }
        stage('Maven Install') {
            steps {
                sh '''
                cd poc-teste/spring-boot-dockerize/
                mvn compile
                mvn install
                '''
            }
        }
        stage('Maven Test') {
            steps {
                sh '''
                cd poc-teste/spring-boot-dockerize/
                mvn test
                '''
            }
        } 
        //stage('INFRA - TESTE') {
        //    steps {
        //        sh '''
        //        '''
        //    }
        //}    
        stage('Maven Deploy Artifact') {
            steps {
            withCredentials([sshUserPrivateKey(credentialsId: 'bastion_key', keyFileVariable: 'bastion_key')]) {
                sh '''
                cd poc-teste/spring-boot-dockerize/target
                scp -i ${bastion_key} -o StrictHostKeyChecking=no spring-boot-docker.jar ec2-user@${SPRING_SERVER}:/home/ec2-user/target/spring-boot-docker.jar
                ssh -o StrictHostKeyChecking=no -i ${bastion_key} ec2-user@${SPRING_SERVER} "sudo docker build -f /home/ec2-user/Dockerfile -t spring:1 ."
                ssh -o StrictHostKeyChecking=no -i ${bastion_key} ec2-user@${SPRING_SERVER} "sudo docker run -p 80:8080 -di spring:1"
                '''
                }
            }
        }        
    }
}
